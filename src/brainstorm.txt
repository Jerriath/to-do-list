--- = done, - = working on


Step 1: Be able to create tasks {}
    Create factory function ---
    Create accessor and mutator functions ---
    Be able to set actual dates --- (just use new Date())

Step 2: Create Project module for storing tasks (prob an array)
    Create factory function for projects ---
    Able to add tasks to projects ---
    Able to remove tasks from projects (splice array holding tasks) ---
    Able to mark task as finished ---
    Sort functions
        Clear Sorted array ---
        By Date ---
        By Priority (Then by name) ---
        By Name (alphabetical) ---

Step 3: Create a container module that holds all the projects
    Able to add projects ---
    Able to remove projects ---
    Sort projectArray by name ---


Step 4: Create Dynamic project modules (today, this week, this month style projects)
    No factory function needed (just one array for each time base)
    Create three exported modules on one dynamicProjects.js file
    Today:
        Able to add tasks
        Able to remove tasks
        Able to mark tasks
        Looks through all projects to see if any task needs to be finished "today" ---
            Adds these tasks to today module ---
    This Week:
        Able to add tasks
        Able to remove tasks
        Able to mark tasks
        Looks through all projects to see if any task needs to be finished "this week" ---
            Adds these tasks to today module ---
    All tasks: 
        Able to add tasks
        Able to remove tasks
        Able to mark tasks
        Looks through all projects to see if any task needs to be finished "this month" ---
            Adds these tasks to today module ---

    THE REST OF STEP 4 REQUIRES A PUB/SUB TO LINK PROJECTS TO DYNAMIC PROJECTS

Step 5: Implement a Pub/Sub to try to soft couple every bit of functionality -

Step 6: Create a function that adds the important information to local storage
    Includes all projects and other single tasks

Step 7: Create DOM elements and styling (UGH)